/* Generated by itemis CREATE code generator. */

#ifndef STATECHART_H_
#define STATECHART_H_

/*!
Forward declaration for the Statechart state machine.
*/
class Statechart;


#include <deque>
#include "sc_types.h"
#include "sc_statemachine.h"
#include "sc_eventdriven.h"
#include <string.h>

/*! \file
Header of the state machine 'Statechart'.
*/


class Statechart : public sc::EventDrivenInterface
{
	public:
		Statechart() noexcept;
		
		virtual ~Statechart();
		
		
		
		/*! Enumeration of all states. */
		enum class State
		{
			NO_STATE,
			Brewer_IDLE,
			Brewer_Brew_process,
			Brewer_Brew_process_r1_CONFIG,
			Brewer_Brew_process_r1_CONFIG_Config_WaitTemp,
			Brewer_Brew_process_r1_CONFIG_Config_set_Temp,
			Brewer_Brew_process_r1_CONFIG_Config_buildConfig,
			Brewer_Brew_process_r1_CONFIG_Config_WaitDuration,
			Brewer_Brew_process_r1_CONFIG_Config_set_Duration,
			Brewer_Brew_process_r1_CONFIG_Config_undo_step,
			Brewer_Brew_process_r1_RUNNING,
			Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing,
			Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding,
			Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix,
			Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix,
			Brewer_Brew_process_r1_RUNNING_Curves_Temp_right,
			Brewer_Brew_process_r1_RUNNING_Curves_set_control,
			Brewer_Brew_process_r1_RUNNING_Curves_Start_timer,
			Brewer_Brew_process_r1_RUNNING_Curves_Stop_timer,
			Brewer_Brew_process_r1_RUNNING_Curves_current_curve,
			Brewer_Brew_process_r1_RUNNING_Curves_start_timer,
			Brewer_Brew_process_r1_RUNNING_Curves_Temp_wrong,
			Brewer_Brew_process_r1_next_curve,
			Brewer_Brew_process_r1_set_next_curve,
			Brewer_Brew_process_r1_READY,
			Brewer_Brew_process_r1_END_PROCESS,
			Brewer_Pre_start,
			Brewer_UART_config,
			Brewer_GPIO_config,
			Brewer_load_default,
			Brewer_reset_default,
			Brewer_config_init,
			Brewer_Timer_config,
			Brewer_clean_config
		};
		
		/*! The number of states. */
		static constexpr const sc::integer numStates {33};
		static constexpr const sc::integer scvi_Brewer_IDLE {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_CONFIG {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_CONFIG_Config_set_Temp {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_CONFIG_Config_buildConfig {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_CONFIG_Config_set_Duration {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_CONFIG_Config_undo_step {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_Curves_Temp_right {1};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_Curves_set_control {1};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_Curves_Start_timer {1};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_Curves_Stop_timer {1};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_Curves_current_curve {1};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_Curves_start_timer {1};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_RUNNING_Curves_Temp_wrong {1};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_next_curve {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_set_next_curve {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_READY {0};
		static constexpr const sc::integer scvi_Brewer_Brew_process_r1_END_PROCESS {0};
		static constexpr const sc::integer scvi_Brewer_Pre_start {0};
		static constexpr const sc::integer scvi_Brewer_UART_config {0};
		static constexpr const sc::integer scvi_Brewer_GPIO_config {0};
		static constexpr const sc::integer scvi_Brewer_load_default {0};
		static constexpr const sc::integer scvi_Brewer_reset_default {0};
		static constexpr const sc::integer scvi_Brewer_config_init {0};
		static constexpr const sc::integer scvi_Brewer_Timer_config {0};
		static constexpr const sc::integer scvi_Brewer_clean_config {0};
		
		/*! Enumeration of all events which are consumed. */
		enum class Event
		{
			NO_EVENT,
			start_program,
			use_default,
			reset_default,
			create_new,
			cancel,
			int_received,
			undo,
			Add,
			config,
			ready,
			timer_trigger,
			temp_wrong,
			temp_right,
			mixer_on,
			mixer_off
		};
		
		class EventInstance
		{
			public:
				explicit  EventInstance(Event id) noexcept : eventId(id){}
				virtual ~EventInstance() = default;
				const Event eventId;
		};
		/*! Raises the in event 'start_program' of default interface scope. */
		void raiseStart_program();
		/*! Raises the in event 'use_default' of default interface scope. */
		void raiseUse_default();
		/*! Raises the in event 'reset_default' of default interface scope. */
		void raiseReset_default();
		/*! Raises the in event 'create_new' of default interface scope. */
		void raiseCreate_new();
		/*! Raises the in event 'cancel' of default interface scope. */
		void raiseCancel();
		/*! Raises the in event 'int_received' of default interface scope. */
		void raiseInt_received();
		/*! Raises the in event 'undo' of default interface scope. */
		void raiseUndo();
		/*! Raises the in event 'Add' of default interface scope. */
		void raiseAdd();
		/*! Raises the in event 'config' of default interface scope. */
		void raiseConfig();
		/*! Raises the in event 'ready' of default interface scope. */
		void raiseReady();
		/*! Raises the in event 'timer_trigger' of default interface scope. */
		void raiseTimer_trigger();
		/*! Raises the in event 'temp_wrong' of default interface scope. */
		void raiseTemp_wrong();
		/*! Raises the in event 'temp_right' of default interface scope. */
		void raiseTemp_right();
		/*! Raises the in event 'mixer_on' of default interface scope. */
		void raiseMixer_on();
		/*! Raises the in event 'mixer_off' of default interface scope. */
		void raiseMixer_off();
		
		
		/*! Gets the value of the variable 'current_temp' that is defined in the default interface scope. */
		sc::integer getCurrent_temp() const noexcept;
		/*! Sets the value of the variable 'current_temp' that is defined in the default interface scope. */
		void setCurrent_temp(sc::integer current_temp) noexcept;
		/*! Gets the value of the variable 'current_duration' that is defined in the default interface scope. */
		sc::integer getCurrent_duration() const noexcept;
		/*! Sets the value of the variable 'current_duration' that is defined in the default interface scope. */
		void setCurrent_duration(sc::integer current_duration) noexcept;
		/*! Gets the value of the variable 'step_count' that is defined in the default interface scope. */
		sc::integer getStep_count() const noexcept;
		/*! Sets the value of the variable 'step_count' that is defined in the default interface scope. */
		void setStep_count(sc::integer step_count) noexcept;
		/*! Gets the value of the variable 'currentCurve' that is defined in the default interface scope. */
		sc::integer getCurrentCurve() const noexcept;
		/*! Sets the value of the variable 'currentCurve' that is defined in the default interface scope. */
		void setCurrentCurve(sc::integer currentCurve) noexcept;
		//! Inner class for default interface scope operation callbacks.
		class OperationCallback
		{
			public:
				virtual ~OperationCallback() = 0;
				
				virtual void configUART() = 0;
				
				virtual void configGPIO() = 0;
				
				virtual void writeUartString(std::string msg) = 0;
				
				virtual void writeUartInt(sc::integer value) = 0;
				
				virtual void writeMixer(sc::integer value) = 0;
				
				virtual sc::integer op_getUartInt() = 0;
				
				virtual void op_InitConfig() = 0;
				
				virtual void op_LoadConfigFromFlash() = 0;
				
				virtual void op_SaveConfigToFlash() = 0;
				
				virtual void op_ClearFlashConfig() = 0;
				
				virtual void op_ResetToFactory() = 0;
				
				virtual void op_PushStep(sc::integer temp, sc::integer duration) = 0;
				
				virtual void op_PopStep() = 0;
				
				virtual void op_ClearSteps() = 0;
				
				virtual void op_PrintConfig() = 0;
				
				virtual sc::integer op_GetStepCount() = 0;
				
				virtual sc::integer op_GetTemperature(sc::integer idx) = 0;
				
				virtual sc::integer op_GetDuration(sc::integer idx) = 0;
				
				virtual void op_TimerInit() = 0;
				
				virtual void op_StartTimer(sc::integer seconds) = 0;
				
				virtual void op_StopTimer() = 0;
				
				virtual void op_ContinueTimer() = 0;
				
				virtual bool op_IsTimerRunning() = 0;
				
				virtual sc::integer op_SetTemperature(sc::integer idx) = 0;
				
				
		};
		
		/*! Set the working instance of the operation callback interface 'OperationCallback'. */
		void setOperationCallback(OperationCallback* operationCallback) noexcept;
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent() override;
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		 void enter() override;
		
		 void exit() override;
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		 bool isActive() const noexcept override;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		 bool isFinal() const noexcept override;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		bool check() const noexcept;
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		bool isStateActive(State state) const noexcept;
		
		
		
	protected:
		
		
		std::deque<EventInstance*> incomingEventQueue;
		
		EventInstance* getNextEvent() noexcept;
		
		bool dispatchEvent(EventInstance* event) noexcept;
		
		
		
	private:
		Statechart(const Statechart &rhs);
		Statechart& operator=(const Statechart&);
		
		sc::integer current_temp {0};
		sc::integer current_duration {0};
		sc::integer step_count {0};
		sc::integer currentCurve {0};
		
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc::ushort maxOrthogonalStates {2};
		
		
		
		State stateConfVector[maxOrthogonalStates];
		
		
		
		OperationCallback* ifaceOperationCallback;
		
		bool completed {false};
		bool doCompletion {false};
		bool isExecuting {false};
		sc::integer stateConfVectorPosition {0};
		
		
		
		// prototypes of all internal functions
		
		void enact_Brewer_IDLE();
		void enact_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
		void enact_Brewer_Brew_process_r1_CONFIG_Config_set_Temp();
		void enact_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
		void enact_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
		void enact_Brewer_Brew_process_r1_CONFIG_Config_set_Duration();
		void enact_Brewer_Brew_process_r1_CONFIG_Config_undo_step();
		void enact_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix();
		void enact_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix();
		void enact_Brewer_Brew_process_r1_RUNNING_Curves_set_control();
		void enact_Brewer_Brew_process_r1_RUNNING_Curves_Start_timer();
		void enact_Brewer_Brew_process_r1_RUNNING_Curves_Stop_timer();
		void enact_Brewer_Brew_process_r1_RUNNING_Curves_current_curve();
		void enact_Brewer_Brew_process_r1_RUNNING_Curves_start_timer();
		void enact_Brewer_Brew_process_r1_next_curve();
		void enact_Brewer_Brew_process_r1_set_next_curve();
		void enact_Brewer_Brew_process_r1_READY();
		void enact_Brewer_Brew_process_r1_END_PROCESS();
		void enact_Brewer_Pre_start();
		void enact_Brewer_UART_config();
		void enact_Brewer_GPIO_config();
		void enact_Brewer_load_default();
		void enact_Brewer_reset_default();
		void enact_Brewer_config_init();
		void enact_Brewer_Timer_config();
		void enact_Brewer_clean_config();
		void enseq_Brewer_IDLE_default();
		void enseq_Brewer_Brew_process_r1_CONFIG_default();
		void enseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_default();
		void enseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp_default();
		void enseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration_default();
		void enseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_timer_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_timer_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve_default();
		void enseq_Brewer_Brew_process_r1_next_curve_default();
		void enseq_Brewer_Brew_process_r1_set_next_curve_default();
		void enseq_Brewer_Brew_process_r1_READY_default();
		void enseq_Brewer_Brew_process_r1_END_PROCESS_default();
		void enseq_Brewer_Pre_start_default();
		void enseq_Brewer_load_default_default();
		void enseq_Brewer_reset_default_default();
		void enseq_Brewer_clean_config_default();
		void enseq_Brewer_default();
		void enseq_Brewer_Brew_process_r1_default();
		void enseq_Brewer_Brew_process_r1_CONFIG_Config_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_default();
		void enseq_Brewer_Brew_process_r1_RUNNING_Curves_default();
		void exseq_Brewer_IDLE();
		void exseq_Brewer_Brew_process();
		void exseq_Brewer_Brew_process_r1_CONFIG();
		void exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
		void exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp();
		void exseq_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
		void exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
		void exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration();
		void exseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step();
		void exseq_Brewer_Brew_process_r1_RUNNING();
		void exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing();
		void exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding();
		void exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix();
		void exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves_Temp_right();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves_set_control();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_timer();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_timer();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves_start_timer();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves_Temp_wrong();
		void exseq_Brewer_Brew_process_r1_next_curve();
		void exseq_Brewer_Brew_process_r1_set_next_curve();
		void exseq_Brewer_Brew_process_r1_READY();
		void exseq_Brewer_Brew_process_r1_END_PROCESS();
		void exseq_Brewer_Pre_start();
		void exseq_Brewer_UART_config();
		void exseq_Brewer_GPIO_config();
		void exseq_Brewer_load_default();
		void exseq_Brewer_reset_default();
		void exseq_Brewer_config_init();
		void exseq_Brewer_Timer_config();
		void exseq_Brewer_clean_config();
		void exseq_Brewer();
		void exseq_Brewer_Brew_process_r1();
		void exseq_Brewer_Brew_process_r1_CONFIG_Config();
		void exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl();
		void exseq_Brewer_Brew_process_r1_RUNNING_Curves();
		void react_Brewer_Brew_process_r1_CONFIG_Config__entry_Default();
		void react_Brewer_Brew_process_r1_RUNNING_MixerCtrl__entry_Default();
		void react_Brewer_Brew_process_r1_RUNNING_Curves__entry_Default();
		void react_Brewer_Brew_process_r1__entry_Default();
		void react_Brewer__entry_Default();
		sc::integer Brewer_IDLE_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_CONFIG_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_CONFIG_Config_set_Temp_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_CONFIG_Config_buildConfig_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_CONFIG_Config_WaitDuration_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_CONFIG_Config_set_Duration_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_CONFIG_Config_undo_step_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_Curves_Temp_right_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_Curves_set_control_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_Curves_Start_timer_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_Curves_Stop_timer_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_Curves_current_curve_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_Curves_start_timer_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_RUNNING_Curves_Temp_wrong_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_next_curve_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_set_next_curve_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_READY_react(const sc::integer transitioned_before);
		sc::integer Brewer_Brew_process_r1_END_PROCESS_react(const sc::integer transitioned_before);
		sc::integer Brewer_Pre_start_react(const sc::integer transitioned_before);
		sc::integer Brewer_UART_config_react(const sc::integer transitioned_before);
		sc::integer Brewer_GPIO_config_react(const sc::integer transitioned_before);
		sc::integer Brewer_load_default_react(const sc::integer transitioned_before);
		sc::integer Brewer_reset_default_react(const sc::integer transitioned_before);
		sc::integer Brewer_config_init_react(const sc::integer transitioned_before);
		sc::integer Brewer_Timer_config_react(const sc::integer transitioned_before);
		sc::integer Brewer_clean_config_react(const sc::integer transitioned_before);
		void clearInEvents() noexcept;
		void microStep();
		void runCycle();
		
		
		
		/*! Indicates event 'start_program' of default interface scope is active. */
		bool start_program_raised {false};
		
		/*! Indicates event 'use_default' of default interface scope is active. */
		bool use_default_raised {false};
		
		/*! Indicates event 'reset_default' of default interface scope is active. */
		bool reset_default_raised {false};
		
		/*! Indicates event 'create_new' of default interface scope is active. */
		bool create_new_raised {false};
		
		/*! Indicates event 'cancel' of default interface scope is active. */
		bool cancel_raised {false};
		
		/*! Indicates event 'int_received' of default interface scope is active. */
		bool int_received_raised {false};
		
		/*! Indicates event 'undo' of default interface scope is active. */
		bool undo_raised {false};
		
		/*! Indicates event 'Add' of default interface scope is active. */
		bool Add_raised {false};
		
		/*! Indicates event 'config' of default interface scope is active. */
		bool config_raised {false};
		
		/*! Indicates event 'ready' of default interface scope is active. */
		bool ready_raised {false};
		
		/*! Indicates event 'timer_trigger' of default interface scope is active. */
		bool timer_trigger_raised {false};
		
		/*! Indicates event 'temp_wrong' of default interface scope is active. */
		bool temp_wrong_raised {false};
		
		/*! Indicates event 'temp_right' of default interface scope is active. */
		bool temp_right_raised {false};
		
		/*! Indicates event 'mixer_on' of default interface scope is active. */
		bool mixer_on_raised {false};
		
		/*! Indicates event 'mixer_off' of default interface scope is active. */
		bool mixer_off_raised {false};
		
		
		
};


inline Statechart::OperationCallback::~OperationCallback() {}


#endif /* STATECHART_H_ */
