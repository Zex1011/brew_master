/* Generated by itemis CREATE code generator. */

#include "Statechart.h"

/*! \file
Implementation of the state machine 'Statechart'
*/




Statechart::Statechart() noexcept
{
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = Statechart::State::NO_STATE;
	
	clearInEvents();
}

Statechart::~Statechart()
{
	while (!incomingEventQueue.empty()) {
		auto nextEvent{incomingEventQueue.front()};
		incomingEventQueue.pop_front();
		delete nextEvent;
	}
}



Statechart::EventInstance* Statechart::getNextEvent() noexcept
{
	Statechart::EventInstance* nextEvent = 0;

	if(!incomingEventQueue.empty()) {
		nextEvent = incomingEventQueue.front();
		incomingEventQueue.pop_front();
	}
	
	return nextEvent;
	
}					


	
bool Statechart::dispatchEvent(Statechart::EventInstance* event) noexcept
{
	if(event == nullptr) {
		return false;
	}
								
	switch(event->eventId)
	{
		case Statechart::Event::start_program:
		{
			start_program_raised = true;
			break;
		}
		case Statechart::Event::use_default:
		{
			use_default_raised = true;
			break;
		}
		case Statechart::Event::reset_default:
		{
			reset_default_raised = true;
			break;
		}
		case Statechart::Event::create_new:
		{
			create_new_raised = true;
			break;
		}
		case Statechart::Event::cancel:
		{
			cancel_raised = true;
			break;
		}
		case Statechart::Event::int_received:
		{
			int_received_raised = true;
			break;
		}
		case Statechart::Event::undo:
		{
			undo_raised = true;
			break;
		}
		case Statechart::Event::Add:
		{
			Add_raised = true;
			break;
		}
		case Statechart::Event::config:
		{
			config_raised = true;
			break;
		}
		case Statechart::Event::ready:
		{
			ready_raised = true;
			break;
		}
		case Statechart::Event::timer_trigger:
		{
			timer_trigger_raised = true;
			break;
		}
		case Statechart::Event::heater_on:
		{
			heater_on_raised = true;
			break;
		}
		case Statechart::Event::heater_off:
		{
			heater_off_raised = true;
			break;
		}
		case Statechart::Event::mixer_on:
		{
			mixer_on_raised = true;
			break;
		}
		case Statechart::Event::mixer_off:
		{
			mixer_off_raised = true;
			break;
		}
		
		
		default:
			//pointer got out of scope
			delete event;
			return false;
	}
	//pointer got out of scope
	delete event;
	return true;
}


/*! Raises the in event 'start_program' of default interface scope. */
void Statechart::raiseStart_program() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::start_program))
	;
	runCycle();
}


/*! Raises the in event 'use_default' of default interface scope. */
void Statechart::raiseUse_default() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::use_default))
	;
	runCycle();
}


/*! Raises the in event 'reset_default' of default interface scope. */
void Statechart::raiseReset_default() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::reset_default))
	;
	runCycle();
}


/*! Raises the in event 'create_new' of default interface scope. */
void Statechart::raiseCreate_new() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::create_new))
	;
	runCycle();
}


/*! Raises the in event 'cancel' of default interface scope. */
void Statechart::raiseCancel() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::cancel))
	;
	runCycle();
}


/*! Raises the in event 'int_received' of default interface scope. */
void Statechart::raiseInt_received() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::int_received))
	;
	runCycle();
}


/*! Raises the in event 'undo' of default interface scope. */
void Statechart::raiseUndo() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::undo))
	;
	runCycle();
}


/*! Raises the in event 'Add' of default interface scope. */
void Statechart::raiseAdd() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::Add))
	;
	runCycle();
}


/*! Raises the in event 'config' of default interface scope. */
void Statechart::raiseConfig() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::config))
	;
	runCycle();
}


/*! Raises the in event 'ready' of default interface scope. */
void Statechart::raiseReady() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::ready))
	;
	runCycle();
}


/*! Raises the in event 'timer_trigger' of default interface scope. */
void Statechart::raiseTimer_trigger() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::timer_trigger))
	;
	runCycle();
}


/*! Raises the in event 'heater_on' of default interface scope. */
void Statechart::raiseHeater_on() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::heater_on))
	;
	runCycle();
}


/*! Raises the in event 'heater_off' of default interface scope. */
void Statechart::raiseHeater_off() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::heater_off))
	;
	runCycle();
}


/*! Raises the in event 'mixer_on' of default interface scope. */
void Statechart::raiseMixer_on() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::mixer_on))
	;
	runCycle();
}


/*! Raises the in event 'mixer_off' of default interface scope. */
void Statechart::raiseMixer_off() {
	incomingEventQueue.push_back(new Statechart::EventInstance(Statechart::Event::mixer_off))
	;
	runCycle();
}



bool Statechart::isActive() const noexcept
{
	return stateConfVector[0] != Statechart::State::NO_STATE||stateConfVector[1] != Statechart::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool Statechart::isFinal() const noexcept
{
	   return false;
}

bool Statechart::check() const noexcept{
	if (this->ifaceOperationCallback == nullptr) {
		return false;
	}
	return true;
}


bool Statechart::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case Statechart::State::Brewer_IDLE :
		{
			return  (stateConfVector[scvi_Brewer_IDLE] == Statechart::State::Brewer_IDLE);
			break;
		}
		case Statechart::State::Brewer_Brew_process :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process] >= Statechart::State::Brewer_Brew_process && stateConfVector[scvi_Brewer_Brew_process] <= Statechart::State::Brewer_Brew_process_r1_END_PROCESS);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG] >= Statechart::State::Brewer_Brew_process_r1_CONFIG && stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG] <= Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp] == Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Temp :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG_Config_set_Temp] == Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Temp);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_buildConfig :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG_Config_buildConfig] == Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_buildConfig);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration] == Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Duration :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG_Config_set_Duration] == Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Duration);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_CONFIG_Config_undo_step] == Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING] >= Statechart::State::Brewer_Brew_process_r1_RUNNING && stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING] <= Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing] == Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding] == Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix] == Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix] == Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_Curves_Heater_off] == Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_set_control :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_Curves_set_control] == Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_set_control);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating] == Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating] == Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_current_curve :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_Curves_current_curve] == Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_current_curve);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_start_timer :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_Curves_start_timer] == Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_start_timer);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_RUNNING_Curves_Heater_on] == Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_next_curve :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_next_curve] == Statechart::State::Brewer_Brew_process_r1_next_curve);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_set_next_curve :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_set_next_curve] == Statechart::State::Brewer_Brew_process_r1_set_next_curve);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_READY :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_READY] == Statechart::State::Brewer_Brew_process_r1_READY);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_END_PROCESS :
		{
			return  (stateConfVector[scvi_Brewer_Brew_process_r1_END_PROCESS] == Statechart::State::Brewer_Brew_process_r1_END_PROCESS);
			break;
		}
		case Statechart::State::Brewer_Pre_start :
		{
			return  (stateConfVector[scvi_Brewer_Pre_start] == Statechart::State::Brewer_Pre_start);
			break;
		}
		case Statechart::State::Brewer_UART_config :
		{
			return  (stateConfVector[scvi_Brewer_UART_config] == Statechart::State::Brewer_UART_config);
			break;
		}
		case Statechart::State::Brewer_GPIO_config :
		{
			return  (stateConfVector[scvi_Brewer_GPIO_config] == Statechart::State::Brewer_GPIO_config);
			break;
		}
		case Statechart::State::Brewer_load_default :
		{
			return  (stateConfVector[scvi_Brewer_load_default] == Statechart::State::Brewer_load_default);
			break;
		}
		case Statechart::State::Brewer_reset_default :
		{
			return  (stateConfVector[scvi_Brewer_reset_default] == Statechart::State::Brewer_reset_default);
			break;
		}
		case Statechart::State::Brewer_config_init :
		{
			return  (stateConfVector[scvi_Brewer_config_init] == Statechart::State::Brewer_config_init);
			break;
		}
		case Statechart::State::Brewer_Timer_config :
		{
			return  (stateConfVector[scvi_Brewer_Timer_config] == Statechart::State::Brewer_Timer_config);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

sc::integer Statechart::getCurrent_temp() const noexcept
{
	return current_temp
	;
}

void Statechart::setCurrent_temp(sc::integer current_temp_) noexcept
{
	this->current_temp = current_temp_;
}
sc::integer Statechart::getCurrent_duration() const noexcept
{
	return current_duration
	;
}

void Statechart::setCurrent_duration(sc::integer current_duration_) noexcept
{
	this->current_duration = current_duration_;
}
sc::integer Statechart::getStep_count() const noexcept
{
	return step_count
	;
}

void Statechart::setStep_count(sc::integer step_count_) noexcept
{
	this->step_count = step_count_;
}
sc::integer Statechart::getCurrentCurve() const noexcept
{
	return currentCurve
	;
}

void Statechart::setCurrentCurve(sc::integer currentCurve_) noexcept
{
	this->currentCurve = currentCurve_;
}
void Statechart::setOperationCallback(OperationCallback* operationCallback) noexcept
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions
/* Entry action for state 'IDLE'. */
void Statechart::enact_Brewer_IDLE()
{
	/* Entry action for state 'IDLE'. */
	ifaceOperationCallback->writeUartString("default: utilizar curva default /n new: configurar nova curva /n reset: reiniciar curva default");
}

/* Entry action for state 'WaitTemp'. */
void Statechart::enact_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp()
{
	/* Entry action for state 'WaitTemp'. */
	ifaceOperationCallback->writeUartString("INFORME A TEMPERATURA DA ETAPA ");
	ifaceOperationCallback->writeUartInt(ifaceOperationCallback->op_GetStepCount());
}

void Statechart::enact_Brewer_Brew_process_r1_CONFIG_Config_set_Temp()
{
	/* Entry action for state 'set_Temp'. */
	setCurrent_temp(ifaceOperationCallback->getUartInt());
	completed = true;
}

/* Entry action for state 'buildConfig'. */
void Statechart::enact_Brewer_Brew_process_r1_CONFIG_Config_buildConfig()
{
	/* Entry action for state 'buildConfig'. */
	ifaceOperationCallback->op_PushStep(current_temp, current_duration);
	ifaceOperationCallback->writeUartString("add: adicionar nova curva.\r\n/n undo: remover curva anterior \r\n/n ready: come\u00E7ar o processo, \r\n/n cancel: sair da configura\u00E7\u00E3o");
}

/* Entry action for state 'WaitDuration'. */
void Statechart::enact_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration()
{
	/* Entry action for state 'WaitDuration'. */
	ifaceOperationCallback->writeUartString("INFORME A DURACAO DA ETAPA ");
	ifaceOperationCallback->writeUartInt(ifaceOperationCallback->op_GetStepCount());
}

void Statechart::enact_Brewer_Brew_process_r1_CONFIG_Config_set_Duration()
{
	/* Entry action for state 'set_Duration'. */
	setCurrent_duration(ifaceOperationCallback->getUartInt());
	completed = true;
}

/* Entry action for state 'undo_step'. */
void Statechart::enact_Brewer_Brew_process_r1_CONFIG_Config_undo_step()
{
	/* Entry action for state 'undo_step'. */
	ifaceOperationCallback->op_PopStep();
}

void Statechart::enact_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix()
{
	/* Entry action for state 'Start Mix'. */
	ifaceOperationCallback->writeUartString("Aquecimento Ligado");
	ifaceOperationCallback->writeHeater(0);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix()
{
	/* Entry action for state 'Stop mix'. */
	ifaceOperationCallback->writeUartString("Aquecimento Ligado");
	ifaceOperationCallback->writeHeater(0);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_RUNNING_Curves_set_control()
{
	/* Entry action for state 'set_control'. */
	ifaceOperationCallback->op_SetTemperature(current_temp);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating()
{
	/* Entry action for state 'Stop_heating'. */
	ifaceOperationCallback->writeUartString("Aquecimento Ligado");
	ifaceOperationCallback->writeHeater(0);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating()
{
	/* Entry action for state 'Start_heating'. */
	ifaceOperationCallback->writeUartString("Aquecimento Ligado");
	ifaceOperationCallback->writeHeater(1);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_RUNNING_Curves_current_curve()
{
	/* Entry action for state 'current_curve'. */
	ifaceOperationCallback->writeUartString("\nTemperatura: ");
	ifaceOperationCallback->writeUartInt(current_temp);
	ifaceOperationCallback->writeUartString("\nDura\u00E7\u00E3o: ");
	ifaceOperationCallback->writeUartInt(current_duration);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_RUNNING_Curves_start_timer()
{
	/* Entry action for state 'start_timer'. */
	ifaceOperationCallback->op_StartTimer(current_duration);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_next_curve()
{
	/* Entry action for state 'next_curve'. */
	setCurrentCurve(currentCurve + 1);
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_set_next_curve()
{
	/* Entry action for state 'set_next_curve'. */
	setCurrent_temp(ifaceOperationCallback->op_GetTemperature(currentCurve));
	setCurrent_duration(ifaceOperationCallback->op_GetDuration(currentCurve));
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_READY()
{
	/* Entry action for state 'READY'. */
	setCurrentCurve(0);
	setStep_count(ifaceOperationCallback->op_GetStepCount());
	completed = true;
}

void Statechart::enact_Brewer_Brew_process_r1_END_PROCESS()
{
	/* Entry action for state 'END_PROCESS'. */
	ifaceOperationCallback->writeUartString("PROCESSO FINALIZADO");
	completed = true;
}

void Statechart::enact_Brewer_Pre_start()
{
	completed = true;
}

void Statechart::enact_Brewer_UART_config()
{
	/* Entry action for state 'UART_config'. */
	ifaceOperationCallback->configUART();
	completed = true;
}

void Statechart::enact_Brewer_GPIO_config()
{
	/* Entry action for state 'GPIO_config'. */
	ifaceOperationCallback->configGPIO();
	completed = true;
}

void Statechart::enact_Brewer_load_default()
{
	/* Entry action for state 'load_default'. */
	ifaceOperationCallback->op_LoadConfigFromFlash();
	completed = true;
}

void Statechart::enact_Brewer_reset_default()
{
	/* Entry action for state 'reset_default'. */
	ifaceOperationCallback->op_ResetToFactory();
	completed = true;
}

void Statechart::enact_Brewer_Timer_config()
{
	/* Entry action for state 'Timer_config'. */
	ifaceOperationCallback->op_TimerInit();
	completed = true;
}

/* 'default' enter sequence for state IDLE */
void Statechart::enseq_Brewer_IDLE_default()
{
	/* 'default' enter sequence for state IDLE */
	enact_Brewer_IDLE();
	stateConfVector[0] = Statechart::State::Brewer_IDLE;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Brew_process */
void Statechart::enseq_Brewer_Brew_process_default()
{
	/* 'default' enter sequence for state Brew_process */
	enseq_Brewer_Brew_process_r1_default();
}

/* 'default' enter sequence for state CONFIG */
void Statechart::enseq_Brewer_Brew_process_r1_CONFIG_default()
{
	/* 'default' enter sequence for state CONFIG */
	enseq_Brewer_Brew_process_r1_CONFIG_Config_default();
}

/* 'default' enter sequence for state WaitTemp */
void Statechart::enseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_default()
{
	/* 'default' enter sequence for state WaitTemp */
	enact_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state set_Temp */
void Statechart::enseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp_default()
{
	/* 'default' enter sequence for state set_Temp */
	enact_Brewer_Brew_process_r1_CONFIG_Config_set_Temp();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Temp;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state set_Duration */
void Statechart::enseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration_default()
{
	/* 'default' enter sequence for state set_Duration */
	enact_Brewer_Brew_process_r1_CONFIG_Config_set_Duration();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Duration;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state undo_step */
void Statechart::enseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step_default()
{
	/* 'default' enter sequence for state undo_step */
	enact_Brewer_Brew_process_r1_CONFIG_Config_undo_step();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Holding */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding_default()
{
	/* 'default' enter sequence for state Holding */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Start Mix */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix_default()
{
	/* 'default' enter sequence for state Start Mix */
	enact_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Stop mix */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix_default()
{
	/* 'default' enter sequence for state Stop mix */
	enact_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Stop_heating */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating_default()
{
	/* 'default' enter sequence for state Stop_heating */
	enact_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating();
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state Start_heating */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating_default()
{
	/* 'default' enter sequence for state Start_heating */
	enact_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating();
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state current_curve */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve_default()
{
	/* 'default' enter sequence for state current_curve */
	enact_Brewer_Brew_process_r1_RUNNING_Curves_current_curve();
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_current_curve;
	stateConfVectorPosition = 1;
}

/* 'default' enter sequence for state next_curve */
void Statechart::enseq_Brewer_Brew_process_r1_next_curve_default()
{
	/* 'default' enter sequence for state next_curve */
	enact_Brewer_Brew_process_r1_next_curve();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_next_curve;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state set_next_curve */
void Statechart::enseq_Brewer_Brew_process_r1_set_next_curve_default()
{
	/* 'default' enter sequence for state set_next_curve */
	enact_Brewer_Brew_process_r1_set_next_curve();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_set_next_curve;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state READY */
void Statechart::enseq_Brewer_Brew_process_r1_READY_default()
{
	/* 'default' enter sequence for state READY */
	enact_Brewer_Brew_process_r1_READY();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_READY;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state END_PROCESS */
void Statechart::enseq_Brewer_Brew_process_r1_END_PROCESS_default()
{
	/* 'default' enter sequence for state END_PROCESS */
	enact_Brewer_Brew_process_r1_END_PROCESS();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_END_PROCESS;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state Pre_start */
void Statechart::enseq_Brewer_Pre_start_default()
{
	/* 'default' enter sequence for state Pre_start */
	enact_Brewer_Pre_start();
	stateConfVector[0] = Statechart::State::Brewer_Pre_start;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state load_default */
void Statechart::enseq_Brewer_load_default_default()
{
	/* 'default' enter sequence for state load_default */
	enact_Brewer_load_default();
	stateConfVector[0] = Statechart::State::Brewer_load_default;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for state reset_default */
void Statechart::enseq_Brewer_reset_default_default()
{
	/* 'default' enter sequence for state reset_default */
	enact_Brewer_reset_default();
	stateConfVector[0] = Statechart::State::Brewer_reset_default;
	stateConfVectorPosition = 0;
}

/* 'default' enter sequence for region Brewer */
void Statechart::enseq_Brewer_default()
{
	/* 'default' enter sequence for region Brewer */
	react_Brewer__entry_Default();
}

/* 'default' enter sequence for region r1 */
void Statechart::enseq_Brewer_Brew_process_r1_default()
{
	/* 'default' enter sequence for region r1 */
	react_Brewer_Brew_process_r1__entry_Default();
}

/* 'default' enter sequence for region Config */
void Statechart::enseq_Brewer_Brew_process_r1_CONFIG_Config_default()
{
	/* 'default' enter sequence for region Config */
	react_Brewer_Brew_process_r1_CONFIG_Config__entry_Default();
}

/* 'default' enter sequence for region MixerCtrl */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_default()
{
	/* 'default' enter sequence for region MixerCtrl */
	react_Brewer_Brew_process_r1_RUNNING_MixerCtrl__entry_Default();
}

/* 'default' enter sequence for region Curves */
void Statechart::enseq_Brewer_Brew_process_r1_RUNNING_Curves_default()
{
	/* 'default' enter sequence for region Curves */
	react_Brewer_Brew_process_r1_RUNNING_Curves__entry_Default();
}

/* Default exit sequence for state IDLE */
void Statechart::exseq_Brewer_IDLE()
{
	/* Default exit sequence for state IDLE */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Brew_process */
void Statechart::exseq_Brewer_Brew_process()
{
	/* Default exit sequence for state Brew_process */
	exseq_Brewer_Brew_process_r1();
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVector[1] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state CONFIG */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG()
{
	/* Default exit sequence for state CONFIG */
	exseq_Brewer_Brew_process_r1_CONFIG_Config();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state WaitTemp */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp()
{
	/* Default exit sequence for state WaitTemp */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state set_Temp */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp()
{
	/* Default exit sequence for state set_Temp */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state buildConfig */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG_Config_buildConfig()
{
	/* Default exit sequence for state buildConfig */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state WaitDuration */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration()
{
	/* Default exit sequence for state WaitDuration */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state set_Duration */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration()
{
	/* Default exit sequence for state set_Duration */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state undo_step */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step()
{
	/* Default exit sequence for state undo_step */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state RUNNING */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING()
{
	/* Default exit sequence for state RUNNING */
	exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl();
	exseq_Brewer_Brew_process_r1_RUNNING_Curves();
	stateConfVector[0] = Statechart::State::Brewer_Brew_process;
	stateConfVector[1] = Statechart::State::Brewer_Brew_process;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Mixing */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing()
{
	/* Default exit sequence for state Mixing */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Holding */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding()
{
	/* Default exit sequence for state Holding */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Start Mix */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix()
{
	/* Default exit sequence for state Start Mix */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Stop mix */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix()
{
	/* Default exit sequence for state Stop mix */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Heater_off */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_off()
{
	/* Default exit sequence for state Heater_off */
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state set_control */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves_set_control()
{
	/* Default exit sequence for state set_control */
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Stop_heating */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating()
{
	/* Default exit sequence for state Stop_heating */
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Start_heating */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating()
{
	/* Default exit sequence for state Start_heating */
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state current_curve */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve()
{
	/* Default exit sequence for state current_curve */
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state start_timer */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves_start_timer()
{
	/* Default exit sequence for state start_timer */
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state Heater_on */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_on()
{
	/* Default exit sequence for state Heater_on */
	stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
	stateConfVectorPosition = 1;
}

/* Default exit sequence for state next_curve */
void Statechart::exseq_Brewer_Brew_process_r1_next_curve()
{
	/* Default exit sequence for state next_curve */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state set_next_curve */
void Statechart::exseq_Brewer_Brew_process_r1_set_next_curve()
{
	/* Default exit sequence for state set_next_curve */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state READY */
void Statechart::exseq_Brewer_Brew_process_r1_READY()
{
	/* Default exit sequence for state READY */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state END_PROCESS */
void Statechart::exseq_Brewer_Brew_process_r1_END_PROCESS()
{
	/* Default exit sequence for state END_PROCESS */
	stateConfVector[0] = Statechart::State::Brewer_Brew_process;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Pre_start */
void Statechart::exseq_Brewer_Pre_start()
{
	/* Default exit sequence for state Pre_start */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state UART_config */
void Statechart::exseq_Brewer_UART_config()
{
	/* Default exit sequence for state UART_config */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state GPIO_config */
void Statechart::exseq_Brewer_GPIO_config()
{
	/* Default exit sequence for state GPIO_config */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state load_default */
void Statechart::exseq_Brewer_load_default()
{
	/* Default exit sequence for state load_default */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state reset_default */
void Statechart::exseq_Brewer_reset_default()
{
	/* Default exit sequence for state reset_default */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state config_init */
void Statechart::exseq_Brewer_config_init()
{
	/* Default exit sequence for state config_init */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for state Timer_config */
void Statechart::exseq_Brewer_Timer_config()
{
	/* Default exit sequence for state Timer_config */
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
}

/* Default exit sequence for region Brewer */
void Statechart::exseq_Brewer()
{
	/* Default exit sequence for region Brewer */
	/* Handle exit of all possible states (of Statechart.Brewer) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::Brewer_IDLE :
		{
			exseq_Brewer_IDLE();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG :
		{
			exseq_Brewer_Brew_process_r1_CONFIG();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Temp :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_buildConfig :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Duration :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_next_curve :
		{
			exseq_Brewer_Brew_process_r1_next_curve();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_set_next_curve :
		{
			exseq_Brewer_Brew_process_r1_set_next_curve();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_READY :
		{
			exseq_Brewer_Brew_process_r1_READY();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_END_PROCESS :
		{
			exseq_Brewer_Brew_process_r1_END_PROCESS();
			break;
		}
		case Statechart::State::Brewer_Pre_start :
		{
			exseq_Brewer_Pre_start();
			break;
		}
		case Statechart::State::Brewer_UART_config :
		{
			exseq_Brewer_UART_config();
			break;
		}
		case Statechart::State::Brewer_GPIO_config :
		{
			exseq_Brewer_GPIO_config();
			break;
		}
		case Statechart::State::Brewer_load_default :
		{
			exseq_Brewer_load_default();
			break;
		}
		case Statechart::State::Brewer_reset_default :
		{
			exseq_Brewer_reset_default();
			break;
		}
		case Statechart::State::Brewer_config_init :
		{
			exseq_Brewer_config_init();
			break;
		}
		case Statechart::State::Brewer_Timer_config :
		{
			exseq_Brewer_Timer_config();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of Statechart.Brewer) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_off();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_set_control :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_set_control();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_current_curve :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_start_timer :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_start_timer();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_on();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region r1 */
void Statechart::exseq_Brewer_Brew_process_r1()
{
	/* Default exit sequence for region r1 */
	/* Handle exit of all possible states (of Statechart.Brewer.Brew_process.r1) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::Brewer_Brew_process_r1_CONFIG :
		{
			exseq_Brewer_Brew_process_r1_CONFIG();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Temp :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_buildConfig :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Duration :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_next_curve :
		{
			exseq_Brewer_Brew_process_r1_next_curve();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_set_next_curve :
		{
			exseq_Brewer_Brew_process_r1_set_next_curve();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_READY :
		{
			exseq_Brewer_Brew_process_r1_READY();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_END_PROCESS :
		{
			exseq_Brewer_Brew_process_r1_END_PROCESS();
			break;
		}
		default:
			/* do nothing */
			break;
	}
	/* Handle exit of all possible states (of Statechart.Brewer.Brew_process.r1) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_off();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_set_control :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_set_control();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_current_curve :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_start_timer :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_start_timer();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_on();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Config */
void Statechart::exseq_Brewer_Brew_process_r1_CONFIG_Config()
{
	/* Default exit sequence for region Config */
	/* Handle exit of all possible states (of Statechart.Brewer.Brew_process.r1.CONFIG.Config) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Temp :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_buildConfig :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Duration :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step :
		{
			exseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region MixerCtrl */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl()
{
	/* Default exit sequence for region MixerCtrl */
	/* Handle exit of all possible states (of Statechart.Brewer.Brew_process.r1.RUNNING.MixerCtrl) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default exit sequence for region Curves */
void Statechart::exseq_Brewer_Brew_process_r1_RUNNING_Curves()
{
	/* Default exit sequence for region Curves */
	/* Handle exit of all possible states (of Statechart.Brewer.Brew_process.r1.RUNNING.Curves) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_off();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_set_control :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_set_control();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_current_curve :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_start_timer :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_start_timer();
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on :
		{
			exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_on();
			break;
		}
		default:
			/* do nothing */
			break;
	}
}

/* Default react sequence for initial entry  */
void Statechart::react_Brewer_Brew_process_r1_CONFIG_Config__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_Brewer_Brew_process_r1_RUNNING_MixerCtrl__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_Brewer_Brew_process_r1_RUNNING_Curves__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Brewer_Brew_process_r1_RUNNING_Curves_current_curve_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_Brewer_Brew_process_r1__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Brewer_Brew_process_r1_CONFIG_default();
}

/* Default react sequence for initial entry  */
void Statechart::react_Brewer__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_Brewer_Pre_start_default();
}

sc::integer Statechart::Brewer_IDLE_react(const sc::integer transitioned_before) {
	/* The reactions of state IDLE. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (use_default_raised)
			{ 
				exseq_Brewer_IDLE();
				enseq_Brewer_load_default_default();
				transitioned_after = 0;
			}  else
			{
				if (create_new_raised)
				{ 
					exseq_Brewer_IDLE();
					enseq_Brewer_Brew_process_default();
					transitioned_after = 0;
				}  else
				{
					if (reset_default_raised)
					{ 
						exseq_Brewer_IDLE();
						enseq_Brewer_reset_default_default();
						transitioned_after = 0;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_react(const sc::integer transitioned_before) {
	/* The reactions of state Brew_process. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (cancel_raised)
			{ 
				exseq_Brewer_Brew_process();
				enseq_Brewer_IDLE_default();
				transitioned_after = 1;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_CONFIG_react(const sc::integer transitioned_before) {
	/* The reactions of state CONFIG. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_react(const sc::integer transitioned_before) {
	/* The reactions of state WaitTemp. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (int_received_raised)
			{ 
				exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
				enseq_Brewer_Brew_process_r1_CONFIG_Config_set_Temp_default();
				Brewer_Brew_process_r1_CONFIG_react(0);
				transitioned_after = 0;
			}  else
			{
				if (undo_raised)
				{ 
					exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp();
					enseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step_default();
					Brewer_Brew_process_r1_CONFIG_react(0);
					transitioned_after = 0;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Brewer_Brew_process_r1_CONFIG_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_CONFIG_Config_set_Temp_react(const sc::integer transitioned_before) {
	/* The reactions of state set_Temp. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state set_Temp */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state WaitDuration */
		enact_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration;
		stateConfVectorPosition = 0;
		Brewer_Brew_process_r1_CONFIG_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_CONFIG_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_CONFIG_Config_buildConfig_react(const sc::integer transitioned_before) {
	/* The reactions of state buildConfig. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (ready_raised)
			{ 
				exseq_Brewer_Brew_process_r1_CONFIG();
				enseq_Brewer_Brew_process_r1_READY_default();
				Brewer_Brew_process_react(0);
				transitioned_after = 0;
			}  else
			{
				if (Add_raised)
				{ 
					exseq_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
					enseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_default();
					Brewer_Brew_process_r1_CONFIG_react(0);
					transitioned_after = 0;
				}  else
				{
					if (undo_raised)
					{ 
						exseq_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
						enseq_Brewer_Brew_process_r1_CONFIG_Config_undo_step_default();
						Brewer_Brew_process_r1_CONFIG_react(0);
						transitioned_after = 0;
					} 
				}
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Brewer_Brew_process_r1_CONFIG_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration_react(const sc::integer transitioned_before) {
	/* The reactions of state WaitDuration. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (undo_raised)
			{ 
				exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
				enseq_Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_default();
				Brewer_Brew_process_r1_CONFIG_react(0);
				transitioned_after = 0;
			}  else
			{
				if (int_received_raised)
				{ 
					exseq_Brewer_Brew_process_r1_CONFIG_Config_WaitDuration();
					enseq_Brewer_Brew_process_r1_CONFIG_Config_set_Duration_default();
					Brewer_Brew_process_r1_CONFIG_react(0);
					transitioned_after = 0;
				} 
			}
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Brewer_Brew_process_r1_CONFIG_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_CONFIG_Config_set_Duration_react(const sc::integer transitioned_before) {
	/* The reactions of state set_Duration. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state set_Duration */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state buildConfig */
		enact_Brewer_Brew_process_r1_CONFIG_Config_buildConfig();
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_buildConfig;
		stateConfVectorPosition = 0;
		Brewer_Brew_process_r1_CONFIG_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_CONFIG_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_CONFIG_Config_undo_step_react(const sc::integer transitioned_before) {
	/* The reactions of state undo_step. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_CONFIG_react(transitioned_before);
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_react(const sc::integer transitioned_before) {
	/* The reactions of state RUNNING. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (timer_trigger_raised)
			{ 
				exseq_Brewer_Brew_process_r1_RUNNING();
				enseq_Brewer_Brew_process_r1_next_curve_default();
				Brewer_Brew_process_react(0);
				transitioned_after = 1;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Brewer_Brew_process_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing_react(const sc::integer transitioned_before) {
	/* The reactions of state Mixing. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (mixer_off_raised)
			{ 
				exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing();
				enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix_default();
				transitioned_after = 0;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding_react(const sc::integer transitioned_before) {
	/* The reactions of state Holding. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (mixer_on_raised)
			{ 
				exseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding();
				enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix_default();
				transitioned_after = 0;
			} 
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix_react(const sc::integer transitioned_before) {
	/* The reactions of state Start Mix. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Start Mix */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state Mixing */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing;
		stateConfVectorPosition = 0;
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix_react(const sc::integer transitioned_before) {
	/* The reactions of state Stop mix. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Stop mix */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state Holding */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding;
		stateConfVectorPosition = 0;
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off_react(const sc::integer transitioned_before) {
	/* The reactions of state Heater_off. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (heater_on_raised)
			{ 
				exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_off();
				enseq_Brewer_Brew_process_r1_RUNNING_Curves_Start_heating_default();
				Brewer_Brew_process_r1_RUNNING_react(0);
				transitioned_after = 1;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Brewer_Brew_process_r1_RUNNING_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_Curves_set_control_react(const sc::integer transitioned_before) {
	/* The reactions of state set_control. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state set_control */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
		stateConfVectorPosition = 1;
		/* 'default' enter sequence for state Heater_off */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off;
		stateConfVectorPosition = 1;
		Brewer_Brew_process_r1_RUNNING_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_RUNNING_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating_react(const sc::integer transitioned_before) {
	/* The reactions of state Stop_heating. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Stop_heating */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
		stateConfVectorPosition = 1;
		/* 'default' enter sequence for state Heater_off */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off;
		stateConfVectorPosition = 1;
		Brewer_Brew_process_r1_RUNNING_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_RUNNING_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating_react(const sc::integer transitioned_before) {
	/* The reactions of state Start_heating. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Start_heating */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
		stateConfVectorPosition = 1;
		/* 'default' enter sequence for state Heater_on */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on;
		stateConfVectorPosition = 1;
		Brewer_Brew_process_r1_RUNNING_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_RUNNING_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_Curves_current_curve_react(const sc::integer transitioned_before) {
	/* The reactions of state current_curve. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state current_curve */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
		stateConfVectorPosition = 1;
		/* 'default' enter sequence for state start_timer */
		enact_Brewer_Brew_process_r1_RUNNING_Curves_start_timer();
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_start_timer;
		stateConfVectorPosition = 1;
		Brewer_Brew_process_r1_RUNNING_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_RUNNING_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_Curves_start_timer_react(const sc::integer transitioned_before) {
	/* The reactions of state start_timer. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state start_timer */
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING;
		stateConfVectorPosition = 1;
		/* 'default' enter sequence for state set_control */
		enact_Brewer_Brew_process_r1_RUNNING_Curves_set_control();
		stateConfVector[1] = Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_set_control;
		stateConfVectorPosition = 1;
		Brewer_Brew_process_r1_RUNNING_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_r1_RUNNING_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on_react(const sc::integer transitioned_before) {
	/* The reactions of state Heater_on. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (1))
		{ 
			if (heater_off_raised)
			{ 
				exseq_Brewer_Brew_process_r1_RUNNING_Curves_Heater_on();
				enseq_Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating_default();
				Brewer_Brew_process_r1_RUNNING_react(0);
				transitioned_after = 1;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = Brewer_Brew_process_r1_RUNNING_react(transitioned_before);
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_next_curve_react(const sc::integer transitioned_before) {
	/* The reactions of state next_curve. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state next_curve */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process;
		stateConfVectorPosition = 0;
		/* The reactions of state null. */
		if ((currentCurve) <= (step_count))
		{ 
			enseq_Brewer_Brew_process_r1_set_next_curve_default();
		}  else
		{
			enseq_Brewer_Brew_process_r1_END_PROCESS_default();
		}
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_set_next_curve_react(const sc::integer transitioned_before) {
	/* The reactions of state set_next_curve. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state set_next_curve */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state RUNNING */
		enseq_Brewer_Brew_process_r1_RUNNING_MixerCtrl_default();
		enseq_Brewer_Brew_process_r1_RUNNING_Curves_default();
		Brewer_Brew_process_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_READY_react(const sc::integer transitioned_before) {
	/* The reactions of state READY. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state READY */
		stateConfVector[0] = Statechart::State::Brewer_Brew_process;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state set_next_curve */
		enact_Brewer_Brew_process_r1_set_next_curve();
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_set_next_curve;
		stateConfVectorPosition = 0;
		Brewer_Brew_process_react(0);
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Brew_process_r1_END_PROCESS_react(const sc::integer transitioned_before) {
	/* The reactions of state END_PROCESS. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Brew_process */
		exseq_Brewer_Brew_process_r1();
		stateConfVector[0] = Statechart::State::NO_STATE;
		stateConfVector[1] = Statechart::State::NO_STATE;
		stateConfVectorPosition = 1;
		/* 'default' enter sequence for state IDLE */
		enact_Brewer_IDLE();
		stateConfVector[0] = Statechart::State::Brewer_IDLE;
		stateConfVectorPosition = 0;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = Brewer_Brew_process_react(transitioned_before);
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_Pre_start_react(const sc::integer transitioned_before) {
	/* The reactions of state Pre_start. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Pre_start */
		stateConfVector[0] = Statechart::State::NO_STATE;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state UART_config */
		enact_Brewer_UART_config();
		stateConfVector[0] = Statechart::State::Brewer_UART_config;
		stateConfVectorPosition = 0;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_UART_config_react(const sc::integer transitioned_before) {
	/* The reactions of state UART_config. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state UART_config */
		stateConfVector[0] = Statechart::State::NO_STATE;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state GPIO_config */
		enact_Brewer_GPIO_config();
		stateConfVector[0] = Statechart::State::Brewer_GPIO_config;
		stateConfVectorPosition = 0;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_GPIO_config_react(const sc::integer transitioned_before) {
	/* The reactions of state GPIO_config. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state GPIO_config */
		stateConfVector[0] = Statechart::State::NO_STATE;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state Timer_config */
		enact_Brewer_Timer_config();
		stateConfVector[0] = Statechart::State::Brewer_Timer_config;
		stateConfVectorPosition = 0;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_load_default_react(const sc::integer transitioned_before) {
	/* The reactions of state load_default. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state load_default */
		stateConfVector[0] = Statechart::State::NO_STATE;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state READY */
		enact_Brewer_Brew_process_r1_READY();
		stateConfVector[0] = Statechart::State::Brewer_Brew_process_r1_READY;
		stateConfVectorPosition = 0;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_reset_default_react(const sc::integer transitioned_before) {
	/* The reactions of state reset_default. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state reset_default */
		stateConfVector[0] = Statechart::State::NO_STATE;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state IDLE */
		enact_Brewer_IDLE();
		stateConfVector[0] = Statechart::State::Brewer_IDLE;
		stateConfVectorPosition = 0;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
	}
	return transitioned_after;
}

sc::integer Statechart::Brewer_config_init_react(const sc::integer transitioned_before) {
	/* The reactions of state config_init. */
	sc::integer transitioned_after = transitioned_before;
	if (!(doCompletion))
	{ 
		if ((transitioned_after) < (0))
		{ 
			if (start_program_raised)
			{ 
				exseq_Brewer_config_init();
				enseq_Brewer_IDLE_default();
				transitioned_after = 0;
			} 
		} 
		/* If no transition was taken */
		if ((transitioned_after) == (transitioned_before))
		{ 
			/* then execute local reactions. */
			transitioned_after = transitioned_before;
		} 
	} 
	return transitioned_after;
}

sc::integer Statechart::Brewer_Timer_config_react(const sc::integer transitioned_before) {
	/* The reactions of state Timer_config. */
	sc::integer transitioned_after = transitioned_before;
	if (doCompletion)
	{ 
		/* Default exit sequence for state Timer_config */
		stateConfVector[0] = Statechart::State::NO_STATE;
		stateConfVectorPosition = 0;
		/* 'default' enter sequence for state config_init */
		stateConfVector[0] = Statechart::State::Brewer_config_init;
		stateConfVectorPosition = 0;
	}  else
	{
		/* Always execute local reactions. */
		transitioned_after = transitioned_before;
	}
	return transitioned_after;
}

void Statechart::clearInEvents() noexcept {
	start_program_raised = false;
	use_default_raised = false;
	reset_default_raised = false;
	create_new_raised = false;
	cancel_raised = false;
	int_received_raised = false;
	undo_raised = false;
	Add_raised = false;
	config_raised = false;
	ready_raised = false;
	timer_trigger_raised = false;
	heater_on_raised = false;
	heater_off_raised = false;
	mixer_on_raised = false;
	mixer_off_raised = false;
}

void Statechart::microStep() {
	sc::integer transitioned = -1;
	stateConfVectorPosition = 0;
	switch(stateConfVector[ 0 ])
	{
		case Statechart::State::Brewer_IDLE :
		{
			transitioned = Brewer_IDLE_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitTemp :
		{
			transitioned = Brewer_Brew_process_r1_CONFIG_Config_WaitTemp_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Temp :
		{
			transitioned = Brewer_Brew_process_r1_CONFIG_Config_set_Temp_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_buildConfig :
		{
			transitioned = Brewer_Brew_process_r1_CONFIG_Config_buildConfig_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_WaitDuration :
		{
			transitioned = Brewer_Brew_process_r1_CONFIG_Config_WaitDuration_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_set_Duration :
		{
			transitioned = Brewer_Brew_process_r1_CONFIG_Config_set_Duration_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_CONFIG_Config_undo_step :
		{
			transitioned = Brewer_Brew_process_r1_CONFIG_Config_undo_step_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing :
		{
			transitioned = Brewer_Brew_process_r1_RUNNING_MixerCtrl_Mixing_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding :
		{
			transitioned = Brewer_Brew_process_r1_RUNNING_MixerCtrl_Holding_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix :
		{
			transitioned = Brewer_Brew_process_r1_RUNNING_MixerCtrl_Start_Mix_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix :
		{
			transitioned = Brewer_Brew_process_r1_RUNNING_MixerCtrl_Stop_mix_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_next_curve :
		{
			transitioned = Brewer_Brew_process_r1_next_curve_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_set_next_curve :
		{
			transitioned = Brewer_Brew_process_r1_set_next_curve_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_READY :
		{
			transitioned = Brewer_Brew_process_r1_READY_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Brew_process_r1_END_PROCESS :
		{
			transitioned = Brewer_Brew_process_r1_END_PROCESS_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Pre_start :
		{
			transitioned = Brewer_Pre_start_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_UART_config :
		{
			transitioned = Brewer_UART_config_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_GPIO_config :
		{
			transitioned = Brewer_GPIO_config_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_load_default :
		{
			transitioned = Brewer_load_default_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_reset_default :
		{
			transitioned = Brewer_reset_default_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_config_init :
		{
			transitioned = Brewer_config_init_react(transitioned);
			break;
		}
		case Statechart::State::Brewer_Timer_config :
		{
			transitioned = Brewer_Timer_config_react(transitioned);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	if ((stateConfVectorPosition) < (1))
	{ 
		switch(stateConfVector[ 1 ])
		{
			case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_off :
			{
				Brewer_Brew_process_r1_RUNNING_Curves_Heater_off_react(transitioned);
				break;
			}
			case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_set_control :
			{
				Brewer_Brew_process_r1_RUNNING_Curves_set_control_react(transitioned);
				break;
			}
			case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating :
			{
				Brewer_Brew_process_r1_RUNNING_Curves_Stop_heating_react(transitioned);
				break;
			}
			case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Start_heating :
			{
				Brewer_Brew_process_r1_RUNNING_Curves_Start_heating_react(transitioned);
				break;
			}
			case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_current_curve :
			{
				Brewer_Brew_process_r1_RUNNING_Curves_current_curve_react(transitioned);
				break;
			}
			case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_start_timer :
			{
				Brewer_Brew_process_r1_RUNNING_Curves_start_timer_react(transitioned);
				break;
			}
			case Statechart::State::Brewer_Brew_process_r1_RUNNING_Curves_Heater_on :
			{
				Brewer_Brew_process_r1_RUNNING_Curves_Heater_on_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
}

void Statechart::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatchEvent(getNextEvent());
	do
	{ 
		doCompletion = false;
		do
		{ 
			if (completed)
			{ 
				doCompletion = true;
			} 
			completed = false;
			microStep();
			clearInEvents();
			doCompletion = false;
		} while (completed);
	} while (dispatchEvent(getNextEvent()));
	isExecuting = false;
}

void Statechart::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart Statechart */
	enseq_Brewer_default();
	doCompletion = false;
	do
	{ 
		if (completed)
		{ 
			doCompletion = true;
		} 
		completed = false;
		microStep();
		clearInEvents();
		doCompletion = false;
	} while (completed);
	isExecuting = false;
}

void Statechart::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart Statechart */
	exseq_Brewer();
	stateConfVector[0] = Statechart::State::NO_STATE;
	stateConfVectorPosition = 0;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void Statechart::triggerWithoutEvent() {
	runCycle();
}


